package mp4

import (
	"github.com/Eyevinn/mp4ff/mp4"
	"github.com/stretchr/testify/assert"
	"os"
	"testing"
)

func TestHappyInitSegment(t *testing.T) {
	ifd, err := os.Open("../.res/Big_Buck_Bunny_1080p.mp4")
	assert.Nil(t, err)
	defer ifd.Close()

	var parsedMp4 *mp4.File
	parsedMp4, err = mp4.DecodeFile(ifd)

	err = createAndWriteInitSegments(parsedMp4, "../.out")
	assert.Nil(t, err)
}

func TestHappySegments(t *testing.T) {
	ifd, err := os.Open("../.res/Big_Buck_Bunny_1080p.mp4")
	assert.Nil(t, err)
	defer ifd.Close()

	var parsedMp4 *mp4.File
	parsedMp4, err = mp4.DecodeFile(ifd)

	outPath := "../.test/out/"

	createAndWriteSegments(parsedMp4, ifd, outPath, 5000)
}

func TestGetsyncPoints(t *testing.T) {
	ifd, err := os.Open("../.res/Big_Buck_Bunny_1080p.mp4")
	assert.Nil(t, err)
	defer ifd.Close()

	var parsedMp4 *mp4.File
	parsedMp4, err = mp4.DecodeFile(ifd)

	// Test data
	// file: Big_Buck_Bunny_1080p.mp4
	// segmentDurationMs: 5000
	var testDataTimescale = uint32(12288)
	var testDatasyncPoints = []syncPoint{
		syncPoint{1, 0, 512},
		syncPoint{129, 65536, 66048},
		syncPoint{257, 131072, 131584},
		syncPoint{379, 193536, 194048},
		syncPoint{513, 262144, 262656},
		syncPoint{641, 327680, 328192},
		syncPoint{769, 393216, 393728},
		syncPoint{897, 458752, 459264},
		syncPoint{1025, 524288, 524800},
		syncPoint{1146, 586240, 586752},
		syncPoint{1281, 655360, 655872},
		syncPoint{1347, 689152, 689664},
		syncPoint{1457, 745472, 745984},
		syncPoint{1665, 851968, 852480},
		syncPoint{1712, 876032, 876544},
		syncPoint{1814, 928256, 928768},
		syncPoint{1921, 983040, 983552},
		syncPoint{2049, 1048576, 1049088},
		syncPoint{2177, 1114112, 1114624},
		syncPoint{2305, 1179648, 1180160},
		syncPoint{2433, 1245184, 1245696},
		syncPoint{2561, 1310720, 1311232},
		syncPoint{2689, 1376256, 1376768},
		syncPoint{2817, 1441792, 1442304},
		syncPoint{2902, 1485312, 1485824},
		syncPoint{3046, 1559040, 1559552},
		syncPoint{3201, 1638400, 1638912},
		syncPoint{3329, 1703936, 1704448},
		syncPoint{3457, 1769472, 1769984},
		syncPoint{3514, 1798656, 1799168},
		syncPoint{3713, 1900544, 1901056},
		syncPoint{3745, 1916928, 1917440},
		syncPoint{3841, 1966080, 1966592},
		syncPoint{3969, 2031616, 2032128},
		syncPoint{4097, 2097152, 2097664},
		syncPoint{4225, 2162688, 2163200},
		syncPoint{4333, 2217984, 2218496},
		syncPoint{4464, 2285056, 2285568},
		syncPoint{4609, 2359296, 2359808},
		syncPoint{4698, 2404864, 2405376},
		syncPoint{4865, 2490368, 2490880},
		syncPoint{4943, 2530304, 2530816},
		syncPoint{5080, 2600448, 2600960},
		syncPoint{5249, 2686976, 2687488},
		syncPoint{5293, 2709504, 2710016},
		syncPoint{5431, 2780160, 2780672},
		syncPoint{5580, 2856448, 2856960},
		syncPoint{5761, 2949120, 2949632},
		syncPoint{5810, 2974208, 2974720},
		syncPoint{5889, 3014656, 3015168},
		syncPoint{6017, 3080192, 3080704},
		syncPoint{6129, 3137536, 3138048},
		syncPoint{6269, 3209216, 3209728},
		syncPoint{6389, 3270656, 3271168},
		syncPoint{6489, 3321856, 3322368},
		syncPoint{6624, 3390976, 3391488},
		syncPoint{6754, 3457536, 3458048},
		syncPoint{6913, 3538944, 3539456},
		syncPoint{7014, 3590656, 3591168},
		syncPoint{7094, 3631616, 3632128},
		syncPoint{7210, 3691008, 3691520},
		syncPoint{7326, 3750400, 3750912},
		syncPoint{7501, 3840000, 3840512},
		syncPoint{7614, 3897856, 3898368},
		syncPoint{7681, 3932160, 3932672},
		syncPoint{7809, 3997696, 3998208},
		syncPoint{7937, 4063232, 4063744},
		syncPoint{8065, 4128768, 4129280},
		syncPoint{8193, 4194304, 4194816},
		syncPoint{8321, 4259840, 4260352},
		syncPoint{8449, 4325376, 4325888},
		syncPoint{8577, 4390912, 4391424},
		syncPoint{8705, 4456448, 4456960},
		syncPoint{8833, 4521984, 4522496},
		syncPoint{8908, 4560384, 4560896},
		syncPoint{9010, 4612608, 4613120},
		syncPoint{9149, 4683776, 4684288},
		syncPoint{9345, 4784128, 4784640},
		syncPoint{9380, 4802048, 4802560},
		syncPoint{9508, 4867584, 4868096},
		syncPoint{9601, 4915200, 4915712},
		syncPoint{9720, 4976128, 4976640},
		syncPoint{9851, 5043200, 5043712},
		syncPoint{9985, 5111808, 5112320},
		syncPoint{10082, 5161472, 5161984},
		syncPoint{10235, 5239808, 5240320},
		syncPoint{10340, 5293568, 5294080},
		syncPoint{10454, 5351936, 5352448},
		syncPoint{10575, 5413888, 5414400},
		syncPoint{10753, 5505024, 5505536},
		syncPoint{10843, 5551104, 5551616},
		syncPoint{11000, 5631488, 5632000},
		syncPoint{11054, 5659136, 5659648},
		syncPoint{11190, 5728768, 5729280},
		syncPoint{11313, 5791744, 5792256},
		syncPoint{11521, 5898240, 5898752},
		syncPoint{11525, 5900288, 5900800},
		syncPoint{11649, 5963776, 5964288},
		syncPoint{11773, 6027264, 6027776},
		syncPoint{11905, 6094848, 6095360},
		syncPoint{12033, 6160384, 6160896},
		syncPoint{12161, 6225920, 6226432},
		syncPoint{12289, 6291456, 6291968},
		syncPoint{12417, 6356992, 6357504},
		syncPoint{12545, 6422528, 6423040},
		syncPoint{12673, 6488064, 6488576},
		syncPoint{12801, 6553600, 6554112},
		syncPoint{12929, 6619136, 6619648},
		syncPoint{13057, 6684672, 6685184},
		syncPoint{13185, 6750208, 6750720},
		syncPoint{13313, 6815744, 6816256},
		syncPoint{13441, 6881280, 6881792},
		syncPoint{13569, 6946816, 6947328},
		syncPoint{13697, 7012352, 7012864},
		syncPoint{13825, 7077888, 7078400},
		syncPoint{13918, 7125504, 7126016},
		syncPoint{13920, 7126528, 7127040},
		syncPoint{14081, 7208960, 7209472},
		syncPoint{14209, 7274496, 7275008},
	}

	timescale, syncPoints, err := getSegmentStartsFromVideo(parsedMp4, 5000)

	assert.Nil(t, err)
	assert.Equal(t, timescale, testDataTimescale)
	assert.Equal(t, len(syncPoints), len(testDatasyncPoints))
	assert.EqualValues(t, syncPoints, testDatasyncPoints)
}

func TestGetSegmentIntervals(t *testing.T) {
	ifd, err := os.Open("../.res/Big_Buck_Bunny_1080p.mp4")
	assert.Nil(t, err)
	defer ifd.Close()

	var parsedMp4 *mp4.File
	parsedMp4, err = mp4.DecodeFile(ifd)

	var testDatasampleIntervals1 = []sampleInterval{
		sampleInterval{1, 128},
		sampleInterval{129, 256},
		sampleInterval{257, 378},
		sampleInterval{379, 512},
		sampleInterval{513, 640},
		sampleInterval{641, 768},
		sampleInterval{769, 896},
		sampleInterval{897, 1024},
		sampleInterval{1025, 1145},
		sampleInterval{1146, 1280},
		sampleInterval{1281, 1346},
		sampleInterval{1347, 1456},
		sampleInterval{1457, 1664},
		sampleInterval{1665, 1711},
		sampleInterval{1712, 1813},
		sampleInterval{1814, 1920},
		sampleInterval{1921, 2048},
		sampleInterval{2049, 2176},
		sampleInterval{2177, 2304},
		sampleInterval{2305, 2432},
		sampleInterval{2433, 2560},
		sampleInterval{2561, 2688},
		sampleInterval{2689, 2816},
		sampleInterval{2817, 2901},
		sampleInterval{2902, 3045},
		sampleInterval{3046, 3200},
		sampleInterval{3201, 3328},
		sampleInterval{3329, 3456},
		sampleInterval{3457, 3513},
		sampleInterval{3514, 3712},
		sampleInterval{3713, 3744},
		sampleInterval{3745, 3840},
		sampleInterval{3841, 3968},
		sampleInterval{3969, 4096},
		sampleInterval{4097, 4224},
		sampleInterval{4225, 4332},
		sampleInterval{4333, 4463},
		sampleInterval{4464, 4608},
		sampleInterval{4609, 4697},
		sampleInterval{4698, 4864},
		sampleInterval{4865, 4942},
		sampleInterval{4943, 5079},
		sampleInterval{5080, 5248},
		sampleInterval{5249, 5292},
		sampleInterval{5293, 5430},
		sampleInterval{5431, 5579},
		sampleInterval{5580, 5760},
		sampleInterval{5761, 5809},
		sampleInterval{5810, 5888},
		sampleInterval{5889, 6016},
		sampleInterval{6017, 6128},
		sampleInterval{6129, 6268},
		sampleInterval{6269, 6388},
		sampleInterval{6389, 6488},
		sampleInterval{6489, 6623},
		sampleInterval{6624, 6753},
		sampleInterval{6754, 6912},
		sampleInterval{6913, 7013},
		sampleInterval{7014, 7093},
		sampleInterval{7094, 7209},
		sampleInterval{7210, 7325},
		sampleInterval{7326, 7500},
		sampleInterval{7501, 7613},
		sampleInterval{7614, 7680},
		sampleInterval{7681, 7808},
		sampleInterval{7809, 7936},
		sampleInterval{7937, 8064},
		sampleInterval{8065, 8192},
		sampleInterval{8193, 8320},
		sampleInterval{8321, 8448},
		sampleInterval{8449, 8576},
		sampleInterval{8577, 8704},
		sampleInterval{8705, 8832},
		sampleInterval{8833, 8907},
		sampleInterval{8908, 9009},
		sampleInterval{9010, 9148},
		sampleInterval{9149, 9344},
		sampleInterval{9345, 9379},
		sampleInterval{9380, 9507},
		sampleInterval{9508, 9600},
		sampleInterval{9601, 9719},
		sampleInterval{9720, 9850},
		sampleInterval{9851, 9984},
		sampleInterval{9985, 10081},
		sampleInterval{10082, 10234},
		sampleInterval{10235, 10339},
		sampleInterval{10340, 10453},
		sampleInterval{10454, 10574},
		sampleInterval{10575, 10752},
		sampleInterval{10753, 10842},
		sampleInterval{10843, 10999},
		sampleInterval{11000, 11053},
		sampleInterval{11054, 11189},
		sampleInterval{11190, 11312},
		sampleInterval{11313, 11520},
		sampleInterval{11521, 11524},
		sampleInterval{11525, 11648},
		sampleInterval{11649, 11772},
		sampleInterval{11773, 11904},
		sampleInterval{11905, 12032},
		sampleInterval{12033, 12160},
		sampleInterval{12161, 12288},
		sampleInterval{12289, 12416},
		sampleInterval{12417, 12544},
		sampleInterval{12545, 12672},
		sampleInterval{12673, 12800},
		sampleInterval{12801, 12928},
		sampleInterval{12929, 13056},
		sampleInterval{13057, 13184},
		sampleInterval{13185, 13312},
		sampleInterval{13313, 13440},
		sampleInterval{13441, 13568},
		sampleInterval{13569, 13696},
		sampleInterval{13697, 13824},
		sampleInterval{13825, 13917},
		sampleInterval{13918, 13919},
		sampleInterval{13920, 14080},
		sampleInterval{14081, 14208},
		sampleInterval{14209, 14314},
	}

	var testDatasampleIntervals2 = []sampleInterval{
		sampleInterval{1, 230},
		sampleInterval{231, 460},
		sampleInterval{461, 679},
		sampleInterval{680, 919},
		sampleInterval{920, 1149},
		sampleInterval{1150, 1379},
		sampleInterval{1380, 1608},
		sampleInterval{1609, 1838},
		sampleInterval{1839, 2055},
		sampleInterval{2056, 2297},
		sampleInterval{2298, 2416},
		sampleInterval{2417, 2613},
		sampleInterval{2614, 2986},
		sampleInterval{2987, 3071},
		sampleInterval{3072, 3254},
		sampleInterval{3255, 3446},
		sampleInterval{3447, 3675},
		sampleInterval{3676, 3905},
		sampleInterval{3906, 4135},
		sampleInterval{4136, 4365},
		sampleInterval{4366, 4594},
		sampleInterval{4595, 4824},
		sampleInterval{4825, 5054},
		sampleInterval{5055, 5206},
		sampleInterval{5207, 5465},
		sampleInterval{5466, 5743},
		sampleInterval{5744, 5972},
		sampleInterval{5973, 6202},
		sampleInterval{6203, 6304},
		sampleInterval{6305, 6661},
		sampleInterval{6662, 6719},
		sampleInterval{6720, 6891},
		sampleInterval{6892, 7121},
		sampleInterval{7122, 7350},
		sampleInterval{7351, 7580},
		sampleInterval{7581, 7774},
		sampleInterval{7775, 8009},
		sampleInterval{8010, 8269},
		sampleInterval{8270, 8429},
		sampleInterval{8430, 8729},
		sampleInterval{8730, 8869},
		sampleInterval{8870, 9114},
		sampleInterval{9115, 9418},
		sampleInterval{9419, 9497},
		sampleInterval{9498, 9744},
		sampleInterval{9745, 10012},
		sampleInterval{10013, 10336},
		sampleInterval{10337, 10424},
		sampleInterval{10425, 10566},
		sampleInterval{10567, 10796},
		sampleInterval{10797, 10997},
		sampleInterval{10998, 11248},
		sampleInterval{11249, 11463},
		sampleInterval{11464, 11643},
		sampleInterval{11644, 11885},
		sampleInterval{11886, 12118},
		sampleInterval{12119, 12404},
		sampleInterval{12405, 12585},
		sampleInterval{12586, 12728},
		sampleInterval{12729, 12937},
		sampleInterval{12938, 13145},
		sampleInterval{13146, 13459},
		sampleInterval{13460, 13662},
		sampleInterval{13663, 13782},
		sampleInterval{13783, 14011},
		sampleInterval{14012, 14241},
		sampleInterval{14242, 14471},
		sampleInterval{14472, 14700},
		sampleInterval{14701, 14930},
		sampleInterval{14931, 15160},
		sampleInterval{15161, 15390},
		sampleInterval{15391, 15619},
		sampleInterval{15620, 15849},
		sampleInterval{15850, 15984},
		sampleInterval{15985, 16167},
		sampleInterval{16168, 16416},
		sampleInterval{16417, 16768},
		sampleInterval{16769, 16830},
		sampleInterval{16831, 17060},
		sampleInterval{17061, 17227},
		sampleInterval{17228, 17441},
		sampleInterval{17442, 17676},
		sampleInterval{17677, 17916},
		sampleInterval{17917, 18090},
		sampleInterval{18091, 18365},
		sampleInterval{18366, 18553},
		sampleInterval{18554, 18758},
		sampleInterval{18759, 18975},
		sampleInterval{18976, 19294},
		sampleInterval{19295, 19456},
		sampleInterval{19457, 19737},
		sampleInterval{19738, 19834},
		sampleInterval{19835, 20078},
		sampleInterval{20079, 20299},
		sampleInterval{20300, 20672},
		sampleInterval{20673, 20680},
		sampleInterval{20681, 20902},
		sampleInterval{20903, 21125},
		sampleInterval{21126, 21361},
		sampleInterval{21362, 21591},
		sampleInterval{21592, 21821},
		sampleInterval{21822, 22050},
		sampleInterval{22051, 22280},
		sampleInterval{22281, 22510},
		sampleInterval{22511, 22740},
		sampleInterval{22741, 22969},
		sampleInterval{22970, 23199},
		sampleInterval{23200, 23429},
		sampleInterval{23430, 23658},
		sampleInterval{23659, 23888},
		sampleInterval{23889, 24118},
		sampleInterval{24119, 24347},
		sampleInterval{24348, 24577},
		sampleInterval{24578, 24807},
		sampleInterval{24808, 24974},
		sampleInterval{24975, 24977},
		sampleInterval{24978, 25266},
		sampleInterval{25267, 25496},
		sampleInterval{25497, 25689},
	}

	timescale, syncPoints, err := getSegmentStartsFromVideo(parsedMp4, 5000)
	assert.Nil(t, err)

	sampleIntervals1, err := getSegmentIntervals(timescale, syncPoints, parsedMp4.Moov.Traks[0])
	assert.Nil(t, err)
	assert.NotNil(t, sampleIntervals1)
	assert.EqualValues(t, sampleIntervals1, testDatasampleIntervals1)

	sampleIntervals2, err := getSegmentIntervals(timescale, syncPoints, parsedMp4.Moov.Traks[1])
	assert.Nil(t, err)
	assert.NotNil(t, sampleIntervals2)
	assert.EqualValues(t, sampleIntervals2, testDatasampleIntervals2)
}
